// Code generated by ZEBRAPACK (github.com/glycerine/zebrapack). DO NOT EDIT.

package basemsg

import (
	"github.com/glycerine/zebrapack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *BaseMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_14cf2b5ce3da8fcb_1 = 2

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields0zgensym_14cf2b5ce3da8fcb_1 uint32
	totalEncodedFields0zgensym_14cf2b5ce3da8fcb_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_14cf2b5ce3da8fcb_1 := totalEncodedFields0zgensym_14cf2b5ce3da8fcb_1
	missingFieldsLeft0zgensym_14cf2b5ce3da8fcb_1 := maxFields0zgensym_14cf2b5ce3da8fcb_1 - totalEncodedFields0zgensym_14cf2b5ce3da8fcb_1

	var nextMiss0zgensym_14cf2b5ce3da8fcb_1 int = -1
	var found0zgensym_14cf2b5ce3da8fcb_1 [maxFields0zgensym_14cf2b5ce3da8fcb_1]bool
	var curField0zgensym_14cf2b5ce3da8fcb_1 int

doneWithStruct0zgensym_14cf2b5ce3da8fcb_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_14cf2b5ce3da8fcb_1 > 0 || missingFieldsLeft0zgensym_14cf2b5ce3da8fcb_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_14cf2b5ce3da8fcb_1, missingFieldsLeft0zgensym_14cf2b5ce3da8fcb_1, msgp.ShowFound(found0zgensym_14cf2b5ce3da8fcb_1[:]), decodeMsgFieldOrder0zgensym_14cf2b5ce3da8fcb_1)
		if encodedFieldsLeft0zgensym_14cf2b5ce3da8fcb_1 > 0 {
			encodedFieldsLeft0zgensym_14cf2b5ce3da8fcb_1--
			curField0zgensym_14cf2b5ce3da8fcb_1, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss0zgensym_14cf2b5ce3da8fcb_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_14cf2b5ce3da8fcb_1 = 0
			}
			for nextMiss0zgensym_14cf2b5ce3da8fcb_1 < maxFields0zgensym_14cf2b5ce3da8fcb_1 && (found0zgensym_14cf2b5ce3da8fcb_1[nextMiss0zgensym_14cf2b5ce3da8fcb_1] || decodeMsgFieldSkip0zgensym_14cf2b5ce3da8fcb_1[nextMiss0zgensym_14cf2b5ce3da8fcb_1]) {
				nextMiss0zgensym_14cf2b5ce3da8fcb_1++
			}
			if nextMiss0zgensym_14cf2b5ce3da8fcb_1 == maxFields0zgensym_14cf2b5ce3da8fcb_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_14cf2b5ce3da8fcb_1
			}
			missingFieldsLeft0zgensym_14cf2b5ce3da8fcb_1--
			curField0zgensym_14cf2b5ce3da8fcb_1 = nextMiss0zgensym_14cf2b5ce3da8fcb_1
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_14cf2b5ce3da8fcb_1)
		switch curField0zgensym_14cf2b5ce3da8fcb_1 {
		// -- templateDecodeMsgZid ends here --

		case 1:
			// zid 1 for "APIType"
			found0zgensym_14cf2b5ce3da8fcb_1[0] = true
			z.APIType, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case 0:
			// zid 0 for "APIVersion"
			found0zgensym_14cf2b5ce3da8fcb_1[1] = true
			z.APIVersion, err = dc.ReadInt8()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_14cf2b5ce3da8fcb_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of BaseMsg
var decodeMsgFieldOrder0zgensym_14cf2b5ce3da8fcb_1 = []string{"APIType", "APIVersion"}

var decodeMsgFieldSkip0zgensym_14cf2b5ce3da8fcb_1 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z BaseMsg) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.APIType == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.APIVersion == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z BaseMsg) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_14cf2b5ce3da8fcb_2 [2]bool
	fieldsInUse_zgensym_14cf2b5ce3da8fcb_3 := z.fieldsNotEmpty(empty_zgensym_14cf2b5ce3da8fcb_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_14cf2b5ce3da8fcb_3)
	if err != nil {
		return err
	}

	if !empty_zgensym_14cf2b5ce3da8fcb_2[0] {
		// zid 1 for "APIType"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.APIType)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_14cf2b5ce3da8fcb_2[1] {
		// zid 0 for "APIVersion"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteInt8(z.APIVersion)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z BaseMsg) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// zid 1 for "APIType"
		o = append(o, 0x1)
		o = msgp.AppendInt64(o, z.APIType)
	}

	if !empty[1] {
		// zid 0 for "APIVersion"
		o = append(o, 0x0)
		o = msgp.AppendInt8(o, z.APIVersion)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BaseMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *BaseMsg) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_14cf2b5ce3da8fcb_5 = 2

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields4zgensym_14cf2b5ce3da8fcb_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_14cf2b5ce3da8fcb_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_14cf2b5ce3da8fcb_5 := totalEncodedFields4zgensym_14cf2b5ce3da8fcb_5
	missingFieldsLeft4zgensym_14cf2b5ce3da8fcb_5 := maxFields4zgensym_14cf2b5ce3da8fcb_5 - totalEncodedFields4zgensym_14cf2b5ce3da8fcb_5

	var nextMiss4zgensym_14cf2b5ce3da8fcb_5 int = -1
	var found4zgensym_14cf2b5ce3da8fcb_5 [maxFields4zgensym_14cf2b5ce3da8fcb_5]bool
	var curField4zgensym_14cf2b5ce3da8fcb_5 int

doneWithStruct4zgensym_14cf2b5ce3da8fcb_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_14cf2b5ce3da8fcb_5 > 0 || missingFieldsLeft4zgensym_14cf2b5ce3da8fcb_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_14cf2b5ce3da8fcb_5, missingFieldsLeft4zgensym_14cf2b5ce3da8fcb_5, msgp.ShowFound(found4zgensym_14cf2b5ce3da8fcb_5[:]), unmarshalMsgFieldOrder4zgensym_14cf2b5ce3da8fcb_5)
		if encodedFieldsLeft4zgensym_14cf2b5ce3da8fcb_5 > 0 {
			encodedFieldsLeft4zgensym_14cf2b5ce3da8fcb_5--
			curField4zgensym_14cf2b5ce3da8fcb_5, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss4zgensym_14cf2b5ce3da8fcb_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_14cf2b5ce3da8fcb_5 = 0
			}
			for nextMiss4zgensym_14cf2b5ce3da8fcb_5 < maxFields4zgensym_14cf2b5ce3da8fcb_5 && (found4zgensym_14cf2b5ce3da8fcb_5[nextMiss4zgensym_14cf2b5ce3da8fcb_5] || unmarshalMsgFieldSkip4zgensym_14cf2b5ce3da8fcb_5[nextMiss4zgensym_14cf2b5ce3da8fcb_5]) {
				nextMiss4zgensym_14cf2b5ce3da8fcb_5++
			}
			if nextMiss4zgensym_14cf2b5ce3da8fcb_5 == maxFields4zgensym_14cf2b5ce3da8fcb_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_14cf2b5ce3da8fcb_5
			}
			missingFieldsLeft4zgensym_14cf2b5ce3da8fcb_5--
			curField4zgensym_14cf2b5ce3da8fcb_5 = nextMiss4zgensym_14cf2b5ce3da8fcb_5
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_14cf2b5ce3da8fcb_5)
		switch curField4zgensym_14cf2b5ce3da8fcb_5 {
		// -- templateUnmarshalMsgZid ends here --

		case 1:
			// zid 1 for "APIType"
			found4zgensym_14cf2b5ce3da8fcb_5[0] = true
			z.APIType, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case 0:
			// zid 0 for "APIVersion"
			found4zgensym_14cf2b5ce3da8fcb_5[1] = true
			z.APIVersion, bts, err = nbs.ReadInt8Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_14cf2b5ce3da8fcb_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of BaseMsg
var unmarshalMsgFieldOrder4zgensym_14cf2b5ce3da8fcb_5 = []string{"APIType", "APIVersion"}

var unmarshalMsgFieldSkip4zgensym_14cf2b5ce3da8fcb_5 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BaseMsg) Msgsize() (s int) {
	s = 1 + 8 + msgp.Int64Size + 11 + msgp.Int8Size
	return
}

// FileBasemsg holds ZebraPack schema from file 'basemsg.go'
type FileBasemsg struct{}

// ZebraSchemaInMsgpack2Format provides the ZebraPack Schema in msgpack2 format, length 373 bytes
func (FileBasemsg) ZebraSchemaInMsgpack2Format() []byte {
	return []byte{
		0x84, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
		0x74, 0x68, 0xaa, 0x62, 0x61, 0x73, 0x65, 0x6d, 0x73, 0x67,
		0x2e, 0x67, 0x6f, 0xad, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
		0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0xa7, 0x62, 0x61,
		0x73, 0x65, 0x6d, 0x73, 0x67, 0xad, 0x5a, 0x65, 0x62, 0x72,
		0x61, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0xd3,
		0x00, 0x01, 0xe7, 0x96, 0xf1, 0x75, 0xa9, 0xf5, 0xa7, 0x53,
		0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x81, 0xa7, 0x42, 0x61,
		0x73, 0x65, 0x4d, 0x73, 0x67, 0x82, 0xaa, 0x53, 0x74, 0x72,
		0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xa7, 0x42, 0x61,
		0x73, 0x65, 0x4d, 0x73, 0x67, 0xa6, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x73, 0x92, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0xa7, 0x41, 0x50, 0x49, 0x54, 0x79, 0x70, 0x65, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0xa7, 0x41, 0x50, 0x49, 0x54, 0x79, 0x70, 0x65,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
		0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x11,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x11, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36,
		0x34, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xaa,
		0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0xaa, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72,
		0x73, 0x69, 0x6f, 0x6e, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa4, 0x69, 0x6e,
		0x74, 0x38, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x0e, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x0e, 0xa3, 0x53, 0x74, 0x72, 0xa4, 0x69,
		0x6e, 0x74, 0x38,
	}
}

// ZebraSchemaInJsonCompact provides the ZebraPack Schema in compact JSON format, length 473 bytes
func (FileBasemsg) ZebraSchemaInJsonCompact() []byte {
	return []byte(`{"SourcePath":"basemsg.go","SourcePackage":"basemsg","ZebraSchemaId":536110458841589,"Structs":{"BaseMsg":{"StructName":"BaseMsg","Fields":[{"Zid":1,"FieldGoName":"APIType","FieldTagName":"APIType","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"}},{"Zid":0,"FieldGoName":"APIVersion","FieldTagName":"APIVersion","FieldTypeStr":"int8","FieldCategory":23,"FieldPrimitive":14,"FieldFullType":{"Kind":14,"Str":"int8"}}]}}}`)
}

// ZebraSchemaInJsonPretty provides the ZebraPack Schema in pretty JSON format, length 1085 bytes
func (FileBasemsg) ZebraSchemaInJsonPretty() []byte {
	return []byte(`{
    "SourcePath": "basemsg.go",
    "SourcePackage": "basemsg",
    "ZebraSchemaId": 536110458841589,
    "Structs": {
        "BaseMsg": {
            "StructName": "BaseMsg",
            "Fields": [
                {
                    "Zid": 1,
                    "FieldGoName": "APIType",
                    "FieldTagName": "APIType",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    }
                },
                {
                    "Zid": 0,
                    "FieldGoName": "APIVersion",
                    "FieldTagName": "APIVersion",
                    "FieldTypeStr": "int8",
                    "FieldCategory": 23,
                    "FieldPrimitive": 14,
                    "FieldFullType": {
                        "Kind": 14,
                        "Str": "int8"
                    }
                }
            ]
        }
    }
}`)
}
