// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package bytearray

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Base) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_f0fd990eebb43224_1 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_f0fd990eebb43224_1 uint32
	totalEncodedFields0zgensym_f0fd990eebb43224_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_f0fd990eebb43224_1 := totalEncodedFields0zgensym_f0fd990eebb43224_1
	missingFieldsLeft0zgensym_f0fd990eebb43224_1 := maxFields0zgensym_f0fd990eebb43224_1 - totalEncodedFields0zgensym_f0fd990eebb43224_1

	var nextMiss0zgensym_f0fd990eebb43224_1 int32 = -1
	var found0zgensym_f0fd990eebb43224_1 [maxFields0zgensym_f0fd990eebb43224_1]bool
	var curField0zgensym_f0fd990eebb43224_1 string

doneWithStruct0zgensym_f0fd990eebb43224_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_f0fd990eebb43224_1 > 0 || missingFieldsLeft0zgensym_f0fd990eebb43224_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_f0fd990eebb43224_1, missingFieldsLeft0zgensym_f0fd990eebb43224_1, msgp.ShowFound(found0zgensym_f0fd990eebb43224_1[:]), decodeMsgFieldOrder0zgensym_f0fd990eebb43224_1)
		if encodedFieldsLeft0zgensym_f0fd990eebb43224_1 > 0 {
			encodedFieldsLeft0zgensym_f0fd990eebb43224_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_f0fd990eebb43224_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_f0fd990eebb43224_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_f0fd990eebb43224_1 = 0
			}
			for nextMiss0zgensym_f0fd990eebb43224_1 < maxFields0zgensym_f0fd990eebb43224_1 && (found0zgensym_f0fd990eebb43224_1[nextMiss0zgensym_f0fd990eebb43224_1] || decodeMsgFieldSkip0zgensym_f0fd990eebb43224_1[nextMiss0zgensym_f0fd990eebb43224_1]) {
				nextMiss0zgensym_f0fd990eebb43224_1++
			}
			if nextMiss0zgensym_f0fd990eebb43224_1 == maxFields0zgensym_f0fd990eebb43224_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_f0fd990eebb43224_1
			}
			missingFieldsLeft0zgensym_f0fd990eebb43224_1--
			curField0zgensym_f0fd990eebb43224_1 = decodeMsgFieldOrder0zgensym_f0fd990eebb43224_1[nextMiss0zgensym_f0fd990eebb43224_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_f0fd990eebb43224_1)
		switch curField0zgensym_f0fd990eebb43224_1 {
		// -- templateDecodeMsg ends here --

		case "version_zid00_i08":
			found0zgensym_f0fd990eebb43224_1[0] = true
			z.Version, err = dc.ReadInt8()
			if err != nil {
				return
			}
		case "type_zid01_i64":
			found0zgensym_f0fd990eebb43224_1[1] = true
			z.Type, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_f0fd990eebb43224_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Base
var decodeMsgFieldOrder0zgensym_f0fd990eebb43224_1 = []string{"version_zid00_i08", "type_zid01_i64"}

var decodeMsgFieldSkip0zgensym_f0fd990eebb43224_1 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z Base) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.Version == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Type == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z Base) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_f0fd990eebb43224_2 [2]bool
	fieldsInUse_zgensym_f0fd990eebb43224_3 := z.fieldsNotEmpty(empty_zgensym_f0fd990eebb43224_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_f0fd990eebb43224_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Base'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x42, 0x61, 0x73, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_f0fd990eebb43224_2[0] {
		// write "version_zid00_i08"
		err = en.Append(0xb1, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x30, 0x38)
		if err != nil {
			return err
		}
		err = en.WriteInt8(z.Version)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f0fd990eebb43224_2[1] {
		// write "type_zid01_i64"
		err = en.Append(0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Type)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z Base) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "version_zid00_i08"
		o = append(o, 0xb1, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x30, 0x38)
		o = msgp.AppendInt8(o, z.Version)
	}

	if !empty[1] {
		// string "type_zid01_i64"
		o = append(o, 0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Type)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Base) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Base) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_f0fd990eebb43224_5 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_f0fd990eebb43224_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_f0fd990eebb43224_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_f0fd990eebb43224_5 := totalEncodedFields4zgensym_f0fd990eebb43224_5
	missingFieldsLeft4zgensym_f0fd990eebb43224_5 := maxFields4zgensym_f0fd990eebb43224_5 - totalEncodedFields4zgensym_f0fd990eebb43224_5

	var nextMiss4zgensym_f0fd990eebb43224_5 int32 = -1
	var found4zgensym_f0fd990eebb43224_5 [maxFields4zgensym_f0fd990eebb43224_5]bool
	var curField4zgensym_f0fd990eebb43224_5 string

doneWithStruct4zgensym_f0fd990eebb43224_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_f0fd990eebb43224_5 > 0 || missingFieldsLeft4zgensym_f0fd990eebb43224_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_f0fd990eebb43224_5, missingFieldsLeft4zgensym_f0fd990eebb43224_5, msgp.ShowFound(found4zgensym_f0fd990eebb43224_5[:]), unmarshalMsgFieldOrder4zgensym_f0fd990eebb43224_5)
		if encodedFieldsLeft4zgensym_f0fd990eebb43224_5 > 0 {
			encodedFieldsLeft4zgensym_f0fd990eebb43224_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_f0fd990eebb43224_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_f0fd990eebb43224_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_f0fd990eebb43224_5 = 0
			}
			for nextMiss4zgensym_f0fd990eebb43224_5 < maxFields4zgensym_f0fd990eebb43224_5 && (found4zgensym_f0fd990eebb43224_5[nextMiss4zgensym_f0fd990eebb43224_5] || unmarshalMsgFieldSkip4zgensym_f0fd990eebb43224_5[nextMiss4zgensym_f0fd990eebb43224_5]) {
				nextMiss4zgensym_f0fd990eebb43224_5++
			}
			if nextMiss4zgensym_f0fd990eebb43224_5 == maxFields4zgensym_f0fd990eebb43224_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_f0fd990eebb43224_5
			}
			missingFieldsLeft4zgensym_f0fd990eebb43224_5--
			curField4zgensym_f0fd990eebb43224_5 = unmarshalMsgFieldOrder4zgensym_f0fd990eebb43224_5[nextMiss4zgensym_f0fd990eebb43224_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_f0fd990eebb43224_5)
		switch curField4zgensym_f0fd990eebb43224_5 {
		// -- templateUnmarshalMsg ends here --

		case "version_zid00_i08":
			found4zgensym_f0fd990eebb43224_5[0] = true
			z.Version, bts, err = nbs.ReadInt8Bytes(bts)

			if err != nil {
				return
			}
		case "type_zid01_i64":
			found4zgensym_f0fd990eebb43224_5[1] = true
			z.Type, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_f0fd990eebb43224_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Base
var unmarshalMsgFieldOrder4zgensym_f0fd990eebb43224_5 = []string{"version_zid00_i08", "type_zid01_i64"}

var unmarshalMsgFieldSkip4zgensym_f0fd990eebb43224_5 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Base) Msgsize() (s int) {
	s = 1 + 18 + msgp.Int8Size + 15 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteArray) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_f0fd990eebb43224_7 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_f0fd990eebb43224_7 uint32
	totalEncodedFields6zgensym_f0fd990eebb43224_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_f0fd990eebb43224_7 := totalEncodedFields6zgensym_f0fd990eebb43224_7
	missingFieldsLeft6zgensym_f0fd990eebb43224_7 := maxFields6zgensym_f0fd990eebb43224_7 - totalEncodedFields6zgensym_f0fd990eebb43224_7

	var nextMiss6zgensym_f0fd990eebb43224_7 int32 = -1
	var found6zgensym_f0fd990eebb43224_7 [maxFields6zgensym_f0fd990eebb43224_7]bool
	var curField6zgensym_f0fd990eebb43224_7 string

doneWithStruct6zgensym_f0fd990eebb43224_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_f0fd990eebb43224_7 > 0 || missingFieldsLeft6zgensym_f0fd990eebb43224_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_f0fd990eebb43224_7, missingFieldsLeft6zgensym_f0fd990eebb43224_7, msgp.ShowFound(found6zgensym_f0fd990eebb43224_7[:]), decodeMsgFieldOrder6zgensym_f0fd990eebb43224_7)
		if encodedFieldsLeft6zgensym_f0fd990eebb43224_7 > 0 {
			encodedFieldsLeft6zgensym_f0fd990eebb43224_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_f0fd990eebb43224_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_f0fd990eebb43224_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_f0fd990eebb43224_7 = 0
			}
			for nextMiss6zgensym_f0fd990eebb43224_7 < maxFields6zgensym_f0fd990eebb43224_7 && (found6zgensym_f0fd990eebb43224_7[nextMiss6zgensym_f0fd990eebb43224_7] || decodeMsgFieldSkip6zgensym_f0fd990eebb43224_7[nextMiss6zgensym_f0fd990eebb43224_7]) {
				nextMiss6zgensym_f0fd990eebb43224_7++
			}
			if nextMiss6zgensym_f0fd990eebb43224_7 == maxFields6zgensym_f0fd990eebb43224_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_f0fd990eebb43224_7
			}
			missingFieldsLeft6zgensym_f0fd990eebb43224_7--
			curField6zgensym_f0fd990eebb43224_7 = decodeMsgFieldOrder6zgensym_f0fd990eebb43224_7[nextMiss6zgensym_f0fd990eebb43224_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_f0fd990eebb43224_7)
		switch curField6zgensym_f0fd990eebb43224_7 {
		// -- templateDecodeMsg ends here --

		case "Base_zid00_rct":
			found6zgensym_f0fd990eebb43224_7[0] = true
			const maxFields8zgensym_f0fd990eebb43224_9 = 2

			// -- templateDecodeMsg starts here--
			var totalEncodedFields8zgensym_f0fd990eebb43224_9 uint32
			totalEncodedFields8zgensym_f0fd990eebb43224_9, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			encodedFieldsLeft8zgensym_f0fd990eebb43224_9 := totalEncodedFields8zgensym_f0fd990eebb43224_9
			missingFieldsLeft8zgensym_f0fd990eebb43224_9 := maxFields8zgensym_f0fd990eebb43224_9 - totalEncodedFields8zgensym_f0fd990eebb43224_9

			var nextMiss8zgensym_f0fd990eebb43224_9 int32 = -1
			var found8zgensym_f0fd990eebb43224_9 [maxFields8zgensym_f0fd990eebb43224_9]bool
			var curField8zgensym_f0fd990eebb43224_9 string

		doneWithStruct8zgensym_f0fd990eebb43224_9:
			// First fill all the encoded fields, then
			// treat the remaining, missing fields, as Nil.
			for encodedFieldsLeft8zgensym_f0fd990eebb43224_9 > 0 || missingFieldsLeft8zgensym_f0fd990eebb43224_9 > 0 {
				//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft8zgensym_f0fd990eebb43224_9, missingFieldsLeft8zgensym_f0fd990eebb43224_9, msgp.ShowFound(found8zgensym_f0fd990eebb43224_9[:]), decodeMsgFieldOrder8zgensym_f0fd990eebb43224_9)
				if encodedFieldsLeft8zgensym_f0fd990eebb43224_9 > 0 {
					encodedFieldsLeft8zgensym_f0fd990eebb43224_9--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					curField8zgensym_f0fd990eebb43224_9 = msgp.UnsafeString(field)
				} else {
					//missing fields need handling
					if nextMiss8zgensym_f0fd990eebb43224_9 < 0 {
						// tell the reader to only give us Nils
						// until further notice.
						dc.PushAlwaysNil()
						nextMiss8zgensym_f0fd990eebb43224_9 = 0
					}
					for nextMiss8zgensym_f0fd990eebb43224_9 < maxFields8zgensym_f0fd990eebb43224_9 && (found8zgensym_f0fd990eebb43224_9[nextMiss8zgensym_f0fd990eebb43224_9] || decodeMsgFieldSkip8zgensym_f0fd990eebb43224_9[nextMiss8zgensym_f0fd990eebb43224_9]) {
						nextMiss8zgensym_f0fd990eebb43224_9++
					}
					if nextMiss8zgensym_f0fd990eebb43224_9 == maxFields8zgensym_f0fd990eebb43224_9 {
						// filled all the empty fields!
						break doneWithStruct8zgensym_f0fd990eebb43224_9
					}
					missingFieldsLeft8zgensym_f0fd990eebb43224_9--
					curField8zgensym_f0fd990eebb43224_9 = decodeMsgFieldOrder8zgensym_f0fd990eebb43224_9[nextMiss8zgensym_f0fd990eebb43224_9]
				}
				//fmt.Printf("switching on curField: '%v'\n", curField8zgensym_f0fd990eebb43224_9)
				switch curField8zgensym_f0fd990eebb43224_9 {
				// -- templateDecodeMsg ends here --

				case "version_zid00_i08":
					found8zgensym_f0fd990eebb43224_9[0] = true
					z.Base.Version, err = dc.ReadInt8()
					if err != nil {
						return
					}
				case "type_zid01_i64":
					found8zgensym_f0fd990eebb43224_9[1] = true
					z.Base.Type, err = dc.ReadInt64()
					if err != nil {
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						return
					}
				}
			}
			if nextMiss8zgensym_f0fd990eebb43224_9 != -1 {
				dc.PopAlwaysNil()
			}

		case "value_zid01_bin":
			found6zgensym_f0fd990eebb43224_7[1] = true
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_f0fd990eebb43224_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ByteArray
var decodeMsgFieldOrder6zgensym_f0fd990eebb43224_7 = []string{"Base_zid00_rct", "value_zid01_bin"}

var decodeMsgFieldSkip6zgensym_f0fd990eebb43224_7 = []bool{false, false}

// fields of Base
var decodeMsgFieldOrder8zgensym_f0fd990eebb43224_9 = []string{"version_zid00_i08", "type_zid01_i64"}

var decodeMsgFieldSkip8zgensym_f0fd990eebb43224_9 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *ByteArray) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = false // struct values are never empty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Value) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ByteArray) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_f0fd990eebb43224_10 [2]bool
	fieldsInUse_zgensym_f0fd990eebb43224_11 := z.fieldsNotEmpty(empty_zgensym_f0fd990eebb43224_10[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_f0fd990eebb43224_11 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ByteArray'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x42, 0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79})
	if err != nil {
		return err
	}

	if !empty_zgensym_f0fd990eebb43224_10[0] {
		// write "Base_zid00_rct"
		err = en.Append(0xae, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}

		// honor the omitempty tags
		var empty_zgensym_f0fd990eebb43224_12 [2]bool
		fieldsInUse_zgensym_f0fd990eebb43224_13 := z.Base.fieldsNotEmpty(empty_zgensym_f0fd990eebb43224_12[:])

		// map header
		err = en.WriteMapHeader(fieldsInUse_zgensym_f0fd990eebb43224_13 + 1)
		if err != nil {
			return err
		}

		// runtime struct type identification for 'Base'
		err = en.Append(0xa1, 0x40)
		if err != nil {
			return err
		}
		err = en.WriteStringFromBytes([]byte{0x42, 0x61, 0x73, 0x65})
		if err != nil {
			return err
		}

		if !empty_zgensym_f0fd990eebb43224_12[0] {
			// write "version_zid00_i08"
			err = en.Append(0xb1, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x30, 0x38)
			if err != nil {
				return err
			}
			err = en.WriteInt8(z.Base.Version)
			if err != nil {
				return
			}
		}

		if !empty_zgensym_f0fd990eebb43224_12[1] {
			// write "type_zid01_i64"
			err = en.Append(0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
			if err != nil {
				return err
			}
			err = en.WriteInt64(z.Base.Type)
			if err != nil {
				return
			}
		}

	}

	if !empty_zgensym_f0fd990eebb43224_10[1] {
		// write "value_zid01_bin"
		err = en.Append(0xaf, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Value)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ByteArray) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Base_zid00_rct"
		o = append(o, 0xae, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)

		// honor the omitempty tags
		var empty [2]bool
		fieldsInUse := z.Base.fieldsNotEmpty(empty[:])
		o = msgp.AppendMapHeader(o, fieldsInUse)

		if !empty[0] {
			// string "version_zid00_i08"
			o = append(o, 0xb1, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x30, 0x38)
			o = msgp.AppendInt8(o, z.Base.Version)
		}

		if !empty[1] {
			// string "type_zid01_i64"
			o = append(o, 0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
			o = msgp.AppendInt64(o, z.Base.Type)
		}

	}

	if !empty[1] {
		// string "value_zid01_bin"
		o = append(o, 0xaf, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.Value)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteArray) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ByteArray) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields14zgensym_f0fd990eebb43224_15 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields14zgensym_f0fd990eebb43224_15 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields14zgensym_f0fd990eebb43224_15, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft14zgensym_f0fd990eebb43224_15 := totalEncodedFields14zgensym_f0fd990eebb43224_15
	missingFieldsLeft14zgensym_f0fd990eebb43224_15 := maxFields14zgensym_f0fd990eebb43224_15 - totalEncodedFields14zgensym_f0fd990eebb43224_15

	var nextMiss14zgensym_f0fd990eebb43224_15 int32 = -1
	var found14zgensym_f0fd990eebb43224_15 [maxFields14zgensym_f0fd990eebb43224_15]bool
	var curField14zgensym_f0fd990eebb43224_15 string

doneWithStruct14zgensym_f0fd990eebb43224_15:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft14zgensym_f0fd990eebb43224_15 > 0 || missingFieldsLeft14zgensym_f0fd990eebb43224_15 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft14zgensym_f0fd990eebb43224_15, missingFieldsLeft14zgensym_f0fd990eebb43224_15, msgp.ShowFound(found14zgensym_f0fd990eebb43224_15[:]), unmarshalMsgFieldOrder14zgensym_f0fd990eebb43224_15)
		if encodedFieldsLeft14zgensym_f0fd990eebb43224_15 > 0 {
			encodedFieldsLeft14zgensym_f0fd990eebb43224_15--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField14zgensym_f0fd990eebb43224_15 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss14zgensym_f0fd990eebb43224_15 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss14zgensym_f0fd990eebb43224_15 = 0
			}
			for nextMiss14zgensym_f0fd990eebb43224_15 < maxFields14zgensym_f0fd990eebb43224_15 && (found14zgensym_f0fd990eebb43224_15[nextMiss14zgensym_f0fd990eebb43224_15] || unmarshalMsgFieldSkip14zgensym_f0fd990eebb43224_15[nextMiss14zgensym_f0fd990eebb43224_15]) {
				nextMiss14zgensym_f0fd990eebb43224_15++
			}
			if nextMiss14zgensym_f0fd990eebb43224_15 == maxFields14zgensym_f0fd990eebb43224_15 {
				// filled all the empty fields!
				break doneWithStruct14zgensym_f0fd990eebb43224_15
			}
			missingFieldsLeft14zgensym_f0fd990eebb43224_15--
			curField14zgensym_f0fd990eebb43224_15 = unmarshalMsgFieldOrder14zgensym_f0fd990eebb43224_15[nextMiss14zgensym_f0fd990eebb43224_15]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField14zgensym_f0fd990eebb43224_15)
		switch curField14zgensym_f0fd990eebb43224_15 {
		// -- templateUnmarshalMsg ends here --

		case "Base_zid00_rct":
			found14zgensym_f0fd990eebb43224_15[0] = true
			const maxFields16zgensym_f0fd990eebb43224_17 = 2

			// -- templateUnmarshalMsg starts here--
			var totalEncodedFields16zgensym_f0fd990eebb43224_17 uint32
			if !nbs.AlwaysNil {
				totalEncodedFields16zgensym_f0fd990eebb43224_17, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
			}
			encodedFieldsLeft16zgensym_f0fd990eebb43224_17 := totalEncodedFields16zgensym_f0fd990eebb43224_17
			missingFieldsLeft16zgensym_f0fd990eebb43224_17 := maxFields16zgensym_f0fd990eebb43224_17 - totalEncodedFields16zgensym_f0fd990eebb43224_17

			var nextMiss16zgensym_f0fd990eebb43224_17 int32 = -1
			var found16zgensym_f0fd990eebb43224_17 [maxFields16zgensym_f0fd990eebb43224_17]bool
			var curField16zgensym_f0fd990eebb43224_17 string

		doneWithStruct16zgensym_f0fd990eebb43224_17:
			// First fill all the encoded fields, then
			// treat the remaining, missing fields, as Nil.
			for encodedFieldsLeft16zgensym_f0fd990eebb43224_17 > 0 || missingFieldsLeft16zgensym_f0fd990eebb43224_17 > 0 {
				//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_f0fd990eebb43224_17, missingFieldsLeft16zgensym_f0fd990eebb43224_17, msgp.ShowFound(found16zgensym_f0fd990eebb43224_17[:]), unmarshalMsgFieldOrder16zgensym_f0fd990eebb43224_17)
				if encodedFieldsLeft16zgensym_f0fd990eebb43224_17 > 0 {
					encodedFieldsLeft16zgensym_f0fd990eebb43224_17--
					field, bts, err = nbs.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					curField16zgensym_f0fd990eebb43224_17 = msgp.UnsafeString(field)
				} else {
					//missing fields need handling
					if nextMiss16zgensym_f0fd990eebb43224_17 < 0 {
						// set bts to contain just mnil (0xc0)
						bts = nbs.PushAlwaysNil(bts)
						nextMiss16zgensym_f0fd990eebb43224_17 = 0
					}
					for nextMiss16zgensym_f0fd990eebb43224_17 < maxFields16zgensym_f0fd990eebb43224_17 && (found16zgensym_f0fd990eebb43224_17[nextMiss16zgensym_f0fd990eebb43224_17] || unmarshalMsgFieldSkip16zgensym_f0fd990eebb43224_17[nextMiss16zgensym_f0fd990eebb43224_17]) {
						nextMiss16zgensym_f0fd990eebb43224_17++
					}
					if nextMiss16zgensym_f0fd990eebb43224_17 == maxFields16zgensym_f0fd990eebb43224_17 {
						// filled all the empty fields!
						break doneWithStruct16zgensym_f0fd990eebb43224_17
					}
					missingFieldsLeft16zgensym_f0fd990eebb43224_17--
					curField16zgensym_f0fd990eebb43224_17 = unmarshalMsgFieldOrder16zgensym_f0fd990eebb43224_17[nextMiss16zgensym_f0fd990eebb43224_17]
				}
				//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_f0fd990eebb43224_17)
				switch curField16zgensym_f0fd990eebb43224_17 {
				// -- templateUnmarshalMsg ends here --

				case "version_zid00_i08":
					found16zgensym_f0fd990eebb43224_17[0] = true
					z.Base.Version, bts, err = nbs.ReadInt8Bytes(bts)

					if err != nil {
						return
					}
				case "type_zid01_i64":
					found16zgensym_f0fd990eebb43224_17[1] = true
					z.Base.Type, bts, err = nbs.ReadInt64Bytes(bts)

					if err != nil {
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						return
					}
				}
			}
			if nextMiss16zgensym_f0fd990eebb43224_17 != -1 {
				bts = nbs.PopAlwaysNil()
			}

		case "value_zid01_bin":
			found14zgensym_f0fd990eebb43224_15[1] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Value = z.Value[:0]
			} else {
				z.Value, bts, err = nbs.ReadBytesBytes(bts, z.Value)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss14zgensym_f0fd990eebb43224_15 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ByteArray
var unmarshalMsgFieldOrder14zgensym_f0fd990eebb43224_15 = []string{"Base_zid00_rct", "value_zid01_bin"}

var unmarshalMsgFieldSkip14zgensym_f0fd990eebb43224_15 = []bool{false, false}

// fields of Base
var unmarshalMsgFieldOrder16zgensym_f0fd990eebb43224_17 = []string{"version_zid00_i08", "type_zid01_i64"}

var unmarshalMsgFieldSkip16zgensym_f0fd990eebb43224_17 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ByteArray) Msgsize() (s int) {
	s = 1 + 15 + 1 + 18 + msgp.Int8Size + 15 + msgp.Int64Size + 16 + msgp.BytesPrefixSize + len(z.Value)
	return
}
