// Code generated by ZEBRAPACK (github.com/glycerine/zebrapack). DO NOT EDIT.

package bytearray

import (
	"github.com/glycerine/zebrapack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteArray) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_f0fd990eebb43224_1 = 2

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields0zgensym_f0fd990eebb43224_1 uint32
	totalEncodedFields0zgensym_f0fd990eebb43224_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_f0fd990eebb43224_1 := totalEncodedFields0zgensym_f0fd990eebb43224_1
	missingFieldsLeft0zgensym_f0fd990eebb43224_1 := maxFields0zgensym_f0fd990eebb43224_1 - totalEncodedFields0zgensym_f0fd990eebb43224_1

	var nextMiss0zgensym_f0fd990eebb43224_1 int = -1
	var found0zgensym_f0fd990eebb43224_1 [maxFields0zgensym_f0fd990eebb43224_1]bool
	var curField0zgensym_f0fd990eebb43224_1 int

doneWithStruct0zgensym_f0fd990eebb43224_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_f0fd990eebb43224_1 > 0 || missingFieldsLeft0zgensym_f0fd990eebb43224_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_f0fd990eebb43224_1, missingFieldsLeft0zgensym_f0fd990eebb43224_1, msgp.ShowFound(found0zgensym_f0fd990eebb43224_1[:]), decodeMsgFieldOrder0zgensym_f0fd990eebb43224_1)
		if encodedFieldsLeft0zgensym_f0fd990eebb43224_1 > 0 {
			encodedFieldsLeft0zgensym_f0fd990eebb43224_1--
			curField0zgensym_f0fd990eebb43224_1, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss0zgensym_f0fd990eebb43224_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_f0fd990eebb43224_1 = 0
			}
			for nextMiss0zgensym_f0fd990eebb43224_1 < maxFields0zgensym_f0fd990eebb43224_1 && (found0zgensym_f0fd990eebb43224_1[nextMiss0zgensym_f0fd990eebb43224_1] || decodeMsgFieldSkip0zgensym_f0fd990eebb43224_1[nextMiss0zgensym_f0fd990eebb43224_1]) {
				nextMiss0zgensym_f0fd990eebb43224_1++
			}
			if nextMiss0zgensym_f0fd990eebb43224_1 == maxFields0zgensym_f0fd990eebb43224_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_f0fd990eebb43224_1
			}
			missingFieldsLeft0zgensym_f0fd990eebb43224_1--
			curField0zgensym_f0fd990eebb43224_1 = nextMiss0zgensym_f0fd990eebb43224_1
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_f0fd990eebb43224_1)
		switch curField0zgensym_f0fd990eebb43224_1 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "BaseMsg"
			found0zgensym_f0fd990eebb43224_1[0] = true
			err = z.BaseMsg.DecodeMsg(dc)
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "Value"
			found0zgensym_f0fd990eebb43224_1[1] = true
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_f0fd990eebb43224_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ByteArray
var decodeMsgFieldOrder0zgensym_f0fd990eebb43224_1 = []string{"BaseMsg", "Value"}

var decodeMsgFieldSkip0zgensym_f0fd990eebb43224_1 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *ByteArray) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Value) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ByteArray) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_f0fd990eebb43224_2 [2]bool
	fieldsInUse_zgensym_f0fd990eebb43224_3 := z.fieldsNotEmpty(empty_zgensym_f0fd990eebb43224_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_f0fd990eebb43224_3)
	if err != nil {
		return err
	}

	if !empty_zgensym_f0fd990eebb43224_2[0] {
		// zid 0 for "BaseMsg"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = z.BaseMsg.EncodeMsg(en)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f0fd990eebb43224_2[1] {
		// zid 1 for "Value"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Value)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ByteArray) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// zid 0 for "BaseMsg"
		o = append(o, 0x0)
		o, err = z.BaseMsg.MarshalMsg(o) // not is.iface, gen/marshal.go:261
		if err != nil {
			return
		}
	}

	if !empty[1] {
		// zid 1 for "Value"
		o = append(o, 0x1)
		o = msgp.AppendBytes(o, z.Value)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteArray) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *ByteArray) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_f0fd990eebb43224_5 = 2

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields4zgensym_f0fd990eebb43224_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_f0fd990eebb43224_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_f0fd990eebb43224_5 := totalEncodedFields4zgensym_f0fd990eebb43224_5
	missingFieldsLeft4zgensym_f0fd990eebb43224_5 := maxFields4zgensym_f0fd990eebb43224_5 - totalEncodedFields4zgensym_f0fd990eebb43224_5

	var nextMiss4zgensym_f0fd990eebb43224_5 int = -1
	var found4zgensym_f0fd990eebb43224_5 [maxFields4zgensym_f0fd990eebb43224_5]bool
	var curField4zgensym_f0fd990eebb43224_5 int

doneWithStruct4zgensym_f0fd990eebb43224_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_f0fd990eebb43224_5 > 0 || missingFieldsLeft4zgensym_f0fd990eebb43224_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_f0fd990eebb43224_5, missingFieldsLeft4zgensym_f0fd990eebb43224_5, msgp.ShowFound(found4zgensym_f0fd990eebb43224_5[:]), unmarshalMsgFieldOrder4zgensym_f0fd990eebb43224_5)
		if encodedFieldsLeft4zgensym_f0fd990eebb43224_5 > 0 {
			encodedFieldsLeft4zgensym_f0fd990eebb43224_5--
			curField4zgensym_f0fd990eebb43224_5, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss4zgensym_f0fd990eebb43224_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_f0fd990eebb43224_5 = 0
			}
			for nextMiss4zgensym_f0fd990eebb43224_5 < maxFields4zgensym_f0fd990eebb43224_5 && (found4zgensym_f0fd990eebb43224_5[nextMiss4zgensym_f0fd990eebb43224_5] || unmarshalMsgFieldSkip4zgensym_f0fd990eebb43224_5[nextMiss4zgensym_f0fd990eebb43224_5]) {
				nextMiss4zgensym_f0fd990eebb43224_5++
			}
			if nextMiss4zgensym_f0fd990eebb43224_5 == maxFields4zgensym_f0fd990eebb43224_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_f0fd990eebb43224_5
			}
			missingFieldsLeft4zgensym_f0fd990eebb43224_5--
			curField4zgensym_f0fd990eebb43224_5 = nextMiss4zgensym_f0fd990eebb43224_5
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_f0fd990eebb43224_5)
		switch curField4zgensym_f0fd990eebb43224_5 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "BaseMsg"
			found4zgensym_f0fd990eebb43224_5[0] = true
			bts, err = z.BaseMsg.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "Value"
			found4zgensym_f0fd990eebb43224_5[1] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Value = z.Value[:0]
			} else {
				z.Value, bts, err = nbs.ReadBytesBytes(bts, z.Value)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_f0fd990eebb43224_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ByteArray
var unmarshalMsgFieldOrder4zgensym_f0fd990eebb43224_5 = []string{"BaseMsg", "Value"}

var unmarshalMsgFieldSkip4zgensym_f0fd990eebb43224_5 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ByteArray) Msgsize() (s int) {
	s = 1 + 8 + z.BaseMsg.Msgsize() + 6 + msgp.BytesPrefixSize + len(z.Value)
	return
}

// FileBytearray holds ZebraPack schema from file 'bytearray.go'
type FileBytearray struct{}

// ZebraSchemaInMsgpack2Format provides the ZebraPack Schema in msgpack2 format, length 433 bytes
func (FileBytearray) ZebraSchemaInMsgpack2Format() []byte {
	return []byte{
		0x85, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
		0x74, 0x68, 0xac, 0x62, 0x79, 0x74, 0x65, 0x61, 0x72, 0x72,
		0x61, 0x79, 0x2e, 0x67, 0x6f, 0xad, 0x53, 0x6f, 0x75, 0x72,
		0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0xa9,
		0x62, 0x79, 0x74, 0x65, 0x61, 0x72, 0x72, 0x61, 0x79, 0xad,
		0x5a, 0x65, 0x62, 0x72, 0x61, 0x53, 0x63, 0x68, 0x65, 0x6d,
		0x61, 0x49, 0x64, 0xd3, 0x00, 0x00, 0x86, 0xf9, 0xe3, 0xb6,
		0x13, 0x24, 0xa7, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
		0x81, 0xa9, 0x42, 0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61,
		0x79, 0x82, 0xaa, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e,
		0x61, 0x6d, 0x65, 0xa9, 0x42, 0x79, 0x74, 0x65, 0x41, 0x72,
		0x72, 0x61, 0x79, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
		0x92, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa7,
		0x42, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x67, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xa7, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x67, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xaa, 0x62, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d,
		0x73, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x16, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74, 0x72, 0xaa, 0x62,
		0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa5, 0x56, 0x61,
		0x6c, 0x75, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa5, 0x56, 0x61, 0x6c,
		0x75, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x5b, 0x5d, 0x62, 0x79,
		0x74, 0x65, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x01, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x01, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x62,
		0x79, 0x74, 0x65, 0x73, 0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72,
		0x74, 0x73, 0x91, 0xd9, 0x26, 0x62, 0x6d, 0x20, 0x22, 0x67,
		0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
		0x70, 0x72, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x62,
		0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x6d,
		0x73, 0x67, 0x22,
	}
}

// ZebraSchemaInJsonCompact provides the ZebraPack Schema in compact JSON format, length 537 bytes
func (FileBytearray) ZebraSchemaInJsonCompact() []byte {
	return []byte(`{"SourcePath":"bytearray.go","SourcePackage":"bytearray","ZebraSchemaId":148407825339172,"Structs":{"ByteArray":{"StructName":"ByteArray","Fields":[{"Zid":0,"FieldGoName":"BaseMsg","FieldTagName":"BaseMsg","FieldTypeStr":"bm.BaseMsg","FieldCategory":23,"FieldPrimitive":22,"FieldFullType":{"Kind":22,"Str":"bm.BaseMsg"}},{"Zid":1,"FieldGoName":"Value","FieldTagName":"Value","FieldTypeStr":"[]byte","FieldCategory":23,"FieldPrimitive":1,"FieldFullType":{"Kind":1,"Str":"bytes"}}]}},"Imports":["bm \"github.com/prodatalab/msg/basemsg\""]}`)
}

// ZebraSchemaInJsonPretty provides the ZebraPack Schema in pretty JSON format, length 1169 bytes
func (FileBytearray) ZebraSchemaInJsonPretty() []byte {
	return []byte(`{
    "SourcePath": "bytearray.go",
    "SourcePackage": "bytearray",
    "ZebraSchemaId": 148407825339172,
    "Structs": {
        "ByteArray": {
            "StructName": "ByteArray",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "BaseMsg",
                    "FieldTagName": "BaseMsg",
                    "FieldTypeStr": "bm.BaseMsg",
                    "FieldCategory": 23,
                    "FieldPrimitive": 22,
                    "FieldFullType": {
                        "Kind": 22,
                        "Str": "bm.BaseMsg"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "Value",
                    "FieldTagName": "Value",
                    "FieldTypeStr": "[]byte",
                    "FieldCategory": 23,
                    "FieldPrimitive": 1,
                    "FieldFullType": {
                        "Kind": 1,
                        "Str": "bytes"
                    }
                }
            ]
        }
    },
    "Imports": [
        "bm \"github.com/prodatalab/msg/basemsg\""
    ]
}`)
}
